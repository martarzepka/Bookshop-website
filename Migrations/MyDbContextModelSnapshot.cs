// <auto-generated />
using System;
using Ksiegarnia.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Ksiegarnia.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Ksiegarnia.Models.Autor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Imie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Autorzy");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Imie = "Jenny",
                            Nazwisko = "Blackhurst"
                        },
                        new
                        {
                            Id = 2,
                            Imie = "Paula",
                            Nazwisko = "Hawkings"
                        },
                        new
                        {
                            Id = 3,
                            Imie = "Andy",
                            Nazwisko = "Weir"
                        },
                        new
                        {
                            Id = 4,
                            Nazwisko = "Daveniss"
                        },
                        new
                        {
                            Id = 5,
                            Imie = "Diego",
                            Nazwisko = "Agrimbau"
                        },
                        new
                        {
                            Id = 6,
                            Imie = "Lucas",
                            Nazwisko = "Varela"
                        });
                });

            modelBuilder.Entity("Ksiegarnia.Models.Cena", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CzyPromocja")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataDo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataOd")
                        .HasColumnType("datetime2");

                    b.Property<int>("KsiazkaId")
                        .HasColumnType("int");

                    b.Property<float>("Wartosc")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("KsiazkaId");

                    b.ToTable("Ceny");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CzyPromocja = false,
                            DataDo = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataOd = new DateTime(2023, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KsiazkaId = 1,
                            Wartosc = 6.99f
                        },
                        new
                        {
                            Id = 2,
                            CzyPromocja = false,
                            DataDo = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataOd = new DateTime(2022, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KsiazkaId = 2,
                            Wartosc = 12.42f
                        },
                        new
                        {
                            Id = 3,
                            CzyPromocja = false,
                            DataDo = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataOd = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KsiazkaId = 3,
                            Wartosc = 27.95f
                        },
                        new
                        {
                            Id = 4,
                            CzyPromocja = false,
                            DataDo = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataOd = new DateTime(2021, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KsiazkaId = 4,
                            Wartosc = 26.23f
                        },
                        new
                        {
                            Id = 5,
                            CzyPromocja = false,
                            DataDo = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataOd = new DateTime(2022, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KsiazkaId = 5,
                            Wartosc = 15.6f
                        },
                        new
                        {
                            Id = 6,
                            CzyPromocja = false,
                            DataDo = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataOd = new DateTime(2022, 8, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KsiazkaId = 6,
                            Wartosc = 60.97f
                        },
                        new
                        {
                            Id = 7,
                            CzyPromocja = true,
                            DataDo = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataOd = new DateTime(2022, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KsiazkaId = 1,
                            Wartosc = 6.99f
                        });
                });

            modelBuilder.Entity("Ksiegarnia.Models.Kategoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Kategorie");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nazwa = "Fantastyka"
                        },
                        new
                        {
                            Id = 2,
                            Nazwa = "Kryminał"
                        },
                        new
                        {
                            Id = 3,
                            Nazwa = "Science Fiction"
                        },
                        new
                        {
                            Id = 4,
                            Nazwa = "Thriller"
                        });
                });

            modelBuilder.Entity("Ksiegarnia.Models.Ksiazka", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CzyWOfercie")
                        .HasColumnType("bit");

                    b.Property<int>("Dostepnosc")
                        .HasColumnType("int");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Sciezka")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tytul")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Ksiazki");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CzyWOfercie = true,
                            Dostepnosc = 15,
                            Opis = "To był najszczęśliwszy dzień w jej życiu. Co więc sprawiło, że skoczyła? Tej nocy stała na klifie i patrzyła w dół, na fale, tak jak dziesiątki razy wcześniej. Ale tym razem było inaczej – miała na sobie suknię ślubną, na rozwianych blond włosach welon i… tym razem skoczyła.",
                            Sciezka = "/images/1.jpg",
                            Tytul = "Noc, kiedy umarła"
                        },
                        new
                        {
                            Id = 2,
                            CzyWOfercie = true,
                            Dostepnosc = 4,
                            Opis = "Rachel każdego ranka dojeżdża do pracy tym samym pociągiem. Wie, że pociąg zawsze zatrzymuje się przed tym samym semaforem, dokładnie naprzeciwko szeregu domów. Zaczyna się jej nawet wydawać, że zna ludzi, którzy mieszkają w jednym z nich. Uważa, że prowadzą doskonałe życie. Gdyby tylko mogła być tak szczęśliwa jak oni.",
                            Sciezka = "/images/noPhoto.jpg",
                            Tytul = "Dziewczyna z pociągu"
                        },
                        new
                        {
                            Id = 3,
                            CzyWOfercie = true,
                            Dostepnosc = 0,
                            Opis = "Trudno żyć z takim piętnem. Nawet jeśli zmienisz nazwisko, i tak żyjesz w ciągłym lęku, że ktoś rzuci ci te słowa w twarz. Kathryn miała pięć lat, kiedy jej ukochany tata zabił jej rówieśniczkę i najlepszą przyjaciółkę, Elsie. Teraz jest trzydziestoletnią kobietą i nadal sobie z tym nie poradziła.",
                            Sciezka = "/images/3.jpg",
                            Tytul = "Córka mordercy"
                        },
                        new
                        {
                            Id = 4,
                            CzyWOfercie = true,
                            Dostepnosc = -5,
                            Opis = "Mark Watney kilka dni temu był jednym z pierwszych ludzi, którzy stanęli na Marsie. Teraz jest pewien, że będzie pierwszym, który tam umrze! Straszliwa burza piaskowa sprawia, że marsjańska ekspedycja, w której skład wchodzi Mark Watney, musi ratować się ucieczką z Czerwonej Planety.",
                            Sciezka = "/images/4.jpg",
                            Tytul = "Marsjanin"
                        },
                        new
                        {
                            Id = 5,
                            CzyWOfercie = true,
                            Dostepnosc = 12,
                            Opis = "Alaric Adlay jest znanym na całym świecie pisarzem fantastyki. Sława i pasja nie pozwoliły mu jednak odnaleźć szczęścia i spełnienia życiowego. Kiedy był już pewien, że jego życie utknęło w martwym punkcie, były przełożony złożył mu ryzykowną ofertę.",
                            Sciezka = "/images/5.jpg",
                            Tytul = "Czarne pióro"
                        },
                        new
                        {
                            Id = 6,
                            CzyWOfercie = true,
                            Dostepnosc = 3,
                            Opis = "Planeta Ziemia. 500 000 lat w przyszłość. Ludzkość wymarła tysiące lat temu. Dwoje naukowców, Robert i jego żona June, pozostawali na orbicie Ziemi, do czasu kiedy ta znów będzie nadawać się do zamieszkania.",
                            Sciezka = "/images/6.jpg",
                            Tytul = "Człowiek"
                        });
                });

            modelBuilder.Entity("Ksiegarnia.Models.KsiazkaAutor", b =>
                {
                    b.Property<int>("KsiazkaId")
                        .HasColumnType("int");

                    b.Property<int>("AutorId")
                        .HasColumnType("int");

                    b.HasKey("KsiazkaId", "AutorId");

                    b.HasIndex("AutorId");

                    b.ToTable("KsiazkaAutor");

                    b.HasData(
                        new
                        {
                            KsiazkaId = 1,
                            AutorId = 1
                        },
                        new
                        {
                            KsiazkaId = 2,
                            AutorId = 2
                        },
                        new
                        {
                            KsiazkaId = 3,
                            AutorId = 1
                        },
                        new
                        {
                            KsiazkaId = 4,
                            AutorId = 3
                        },
                        new
                        {
                            KsiazkaId = 5,
                            AutorId = 4
                        },
                        new
                        {
                            KsiazkaId = 6,
                            AutorId = 5
                        },
                        new
                        {
                            KsiazkaId = 6,
                            AutorId = 6
                        });
                });

            modelBuilder.Entity("Ksiegarnia.Models.KsiazkaKategoria", b =>
                {
                    b.Property<int>("KsiazkaId")
                        .HasColumnType("int");

                    b.Property<int>("KategoriaId")
                        .HasColumnType("int");

                    b.HasKey("KsiazkaId", "KategoriaId");

                    b.HasIndex("KategoriaId");

                    b.ToTable("KsiazkaKategoria");

                    b.HasData(
                        new
                        {
                            KsiazkaId = 1,
                            KategoriaId = 2
                        },
                        new
                        {
                            KsiazkaId = 1,
                            KategoriaId = 4
                        },
                        new
                        {
                            KsiazkaId = 2,
                            KategoriaId = 2
                        },
                        new
                        {
                            KsiazkaId = 2,
                            KategoriaId = 4
                        },
                        new
                        {
                            KsiazkaId = 3,
                            KategoriaId = 2
                        },
                        new
                        {
                            KsiazkaId = 3,
                            KategoriaId = 4
                        },
                        new
                        {
                            KsiazkaId = 4,
                            KategoriaId = 3
                        },
                        new
                        {
                            KsiazkaId = 5,
                            KategoriaId = 1
                        },
                        new
                        {
                            KsiazkaId = 5,
                            KategoriaId = 3
                        },
                        new
                        {
                            KsiazkaId = 6,
                            KategoriaId = 1
                        },
                        new
                        {
                            KsiazkaId = 6,
                            KategoriaId = 3
                        });
                });

            modelBuilder.Entity("Ksiegarnia.Models.Cena", b =>
                {
                    b.HasOne("Ksiegarnia.Models.Ksiazka", "Ksiazka")
                        .WithMany("Cena")
                        .HasForeignKey("KsiazkaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ksiazka");
                });

            modelBuilder.Entity("Ksiegarnia.Models.KsiazkaAutor", b =>
                {
                    b.HasOne("Ksiegarnia.Models.Autor", "Autor")
                        .WithMany("KsiazkaAutor")
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ksiegarnia.Models.Ksiazka", "Ksiazka")
                        .WithMany("KsiazkaAutor")
                        .HasForeignKey("KsiazkaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");

                    b.Navigation("Ksiazka");
                });

            modelBuilder.Entity("Ksiegarnia.Models.KsiazkaKategoria", b =>
                {
                    b.HasOne("Ksiegarnia.Models.Kategoria", "Kategoria")
                        .WithMany("KsiazkaKategoria")
                        .HasForeignKey("KategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ksiegarnia.Models.Ksiazka", "Ksiazka")
                        .WithMany("KsiazkaKategoria")
                        .HasForeignKey("KsiazkaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kategoria");

                    b.Navigation("Ksiazka");
                });

            modelBuilder.Entity("Ksiegarnia.Models.Autor", b =>
                {
                    b.Navigation("KsiazkaAutor");
                });

            modelBuilder.Entity("Ksiegarnia.Models.Kategoria", b =>
                {
                    b.Navigation("KsiazkaKategoria");
                });

            modelBuilder.Entity("Ksiegarnia.Models.Ksiazka", b =>
                {
                    b.Navigation("Cena");

                    b.Navigation("KsiazkaAutor");

                    b.Navigation("KsiazkaKategoria");
                });
#pragma warning restore 612, 618
        }
    }
}
